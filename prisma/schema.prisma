generator client {
  provider  = "prisma-client-py"
  interface = "asyncio"
}

datasource db {
  provider = "sqlite"
  url      = "file:database.db"
}

// Location Table
model Location {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  runs      Runs[]
}

// Runs Table
model Runs {
  id                Int      @id @default(autoincrement())
  date              DateTime @default(now())
  locationID        Int
  name              String
  description       String
  rainfallStatsFile String?
  spillStatsFile    String?
  baselineStatsFile String?
  Assets            Assets[]
  location          Location @relation(fields: [locationID], references: [id], onDelete: Cascade)
}

// Tests Table
model Tests {
  id          Int          @id @default(autoincrement())
  name        String
  description String
  assetTests  AssetTests[]
}

model Assets {
  id         Int          @id @default(autoincrement())
  name       String
  runID      Int
  run        Runs         @relation(fields: [runID], references: [id], onDelete: Cascade)
  assetTests AssetTests[]
}

model AssetTests {
  id         Int          @id @default(autoincrement())
  assetID    Int
  asset      Assets       @relation(fields: [assetID], references: [id], onDelete: Cascade)
  testID     Int
  status     String
  test       Tests        @relation(fields: [testID], references: [id])
  summary    Summary[]    @relation("assetTestToSummary")
  timeSeries TimeSeries[] @relation("assetTestToTimeSeries")
  spillEvent SpillEvent[] @relation("assetTestToSpillEvent")
  testThree  TestThree[]  @relation("assetTestToTestThree")
}

// // Run Test Table
// model RunTests {
//   id         Int          @id @default(autoincrement())
//   runID      Int
//   testID     Int
//   status     String
//   run        Runs         @relation(fields: [runID], references: [id], onDelete: Cascade)
//   test       Tests        @relation(fields: [testID], references: [id])
//   summary    Summary[]    @relation("RunTestToSummary")
//   timeSeries TimeSeries[] @relation("RunTestToTimeSeries")
//   spillEvent SpillEvent[] @relation("RunTestToSpillEvent")
//   testThree  TestThree[]  @relation("RunTestToTestThree")
// }

model Summary {
  id                   Int        @id @default(autoincrement())
  year                 String
  dryPerc              Float
  heavyPerc            Float
  spillPerc            Float
  unsatisfactorySpills Int
  substandardSpills    Int
  satisfactorySpills   Int
  totalIntensity       Float
  assetTestID          Int
  assetTest            AssetTests @relation("assetTestToSummary", fields: [assetTestID], references: [id], onDelete: Cascade)
}

model TimeSeries {
  id             Int        @id @default(autoincrement())
  dateTime       DateTime
  intensity      Float
  depth          Float
  rollingDepth   Float
  classification String
  spillAllowed   String?
  dayType        String
  result         String?
  assetTestID    Int
  assetTest      AssetTests @relation("assetTestToTimeSeries", fields: [assetTestID], references: [id], onDelete: Cascade)
}

model SpillEvent {
  id             Int        @id @default(autoincrement())
  start          DateTime
  end            DateTime
  volume         Float
  runName        String
  maxIntensity   Float
  maxDepthInHour Float
  totalDepth     Float
  test1          String
  test2          String
  classification String
  assetTestID    Int
  assetTest      AssetTests @relation("assetTestToSpillEvent", fields: [assetTestID], references: [id], onDelete: Cascade)
}

model TestThree {
  id               Int        @id @default(autoincrement())
  year             String
  formulaAInput    Float?
  consentFPFInput  Float?
  complianceStatus String
  formulaAStatus   String
  consentFPFStatus String
  assetTestID      Int
  assetTest        AssetTests @relation("assetTestToTestThree", fields: [assetTestID], references: [id], onDelete: Cascade)
}
